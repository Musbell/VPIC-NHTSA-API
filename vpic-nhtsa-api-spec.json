{
  "openapi": "3.0.3",
  "info": {
    "description": "The NHTSA Product Information Catalog Vehicle Listing (vPIC) Application Programming Interface (API) provides different ways to gather information on Vehicles and their specifications.",
    "title": "VPIC-NHTSA API",
    "version": "1.0.0",
    "contact": {
      "name": "NHTSA",
      "url": "https://vpic.nhtsa.dot.gov/"
    }
  },
  "servers": [
    {
      "url": "https://vpic.nhtsa.dot.gov/api"
    }
  ],
  "paths": {
    "/vehicles/DecodeVinValues/5UXWX7C5*BA": {
      "get": {
        "tags": ["VIN"],
        "summary": "Decode VIN",
        "description": "The Decode VIN API will decode the VIN and the decoded output will be made available in the format of Key-value pairs",
        "operationId": "decodeVIN",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "modelyear",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Decode VIN(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/DecodeVinExtended/5UXWX7C5*BA": {
      "get": {
        "tags": ["VIN"],
        "summary": "Decode VIN Extended",
        "description": "This is exactly like the Decode VIN method but provides additional information on variables related to other NHTSA programs like NCSA etc.",
        "operationId": "decodeVinExtended",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "modelyear",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Decode VIN Extended(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/DecodeVinValuesExtended/5UXWX7C5*BA": {
      "get": {
        "tags": ["VIN"],
        "summary": "Decode VIN Extended (flat format)",
        "description": "This is exactly like the Decode VIN (flat format) method but provides additional information on variables related to other NHTSA programs like NCSA etc.",
        "operationId": "decodeVinExtendedFlatFormat",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "modelyear",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2011"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Decode VIN Extended flat(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/DecodeWMI/{WmiCode}": {
      "get": {
        "tags": ["WMI"],
        "summary": "Decode WMI",
        "description": "This provides information on the World Manufacturer Identifier for a specific WMI code. WMIs may be put in as either 3 characters representing VIN position 1-3 or 6 characters representing VIN positions 1-3 & 12-14. Example 'JTD', '1T9131'.",
        "operationId": "decodeWMI",
        "parameters": [
          {
            "name": "WmiCode",
            "in": "path",
            "description": "World Manufacturer Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1FD",
              "default": "1FD"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Decode Decode WMI(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetWMIsForManufacturer/{manufacturer}": {
      "get": {
        "tags": ["WMI"],
        "summary": "WMIs for Manufacturer",
        "description": "Provides information on the all World Manufacturer Identifier (WMI) for a specified Manufacturer. Only WMI registered in vPICList are displayed.",
        "operationId": "WMIsForManufacturer",
        "parameters": [
          {
            "name": "manufacturer",
            "in": "path",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "hon",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManufacturerName"
                },
                {
                  "$ref": "#/components/schemas/ManufacturerId"
                }
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "vehicleType",
            "in": "query",
            "required": false,
            "description": "If VehicleType is a number - method will do exact match on VehicleType's Id. If VehicleType is a string - it will look for VehicleType whose name is LIKE the provided name (it accepts a partial VehicleType name as an input). Multiple results are returned in case of multiple matches.",
            "schema": {
              "example": "car",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/VehicleTypeString"
                },
                {
                  "$ref": "#/components/schemas/VehicleTypeInteger"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of WMIs for Manufacturer(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetAllMakes": {
      "get": {
        "tags": ["Makes"],
        "summary": "All Makes",
        "description": "This provides a list of all the Makes available in vPIC Dataset.",
        "operationId": "allMakes",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of all make(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetParts": {
      "get": {
        "tags": ["Parts"],
        "summary": "Parts",
        "description": "This provides a list of ORGs with letter date in the given range of the dates and with specified Type of ORG. Up to 1000 results will be returned at a time.",
        "operationId": "parts",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "description": "number, 565 (Vehicle Identification Number Guidance, based on 49 CFR Part 565) or 566 (Manufacturer Identification â€“ Reporting Requirements based on 49 CFR Part 566)",
            "schema": {
              "type": "integer",
              "example": 565
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "description": "(optional) ORG's Letter Date should be on or after this date",
            "schema": {
              "type": "string",
              "example": "1/1/2015"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "description": "(optional) ORG's Letter Date should be on or before this date",
            "schema": {
              "type": "string",
              "example": "1/1/2015"
            }
          },
          {
            "name": "manufacturer",
            "in": "query",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "hon",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManufacturerName"
                },
                {
                  "$ref": "#/components/schemas/ManufacturerId"
                }
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "description": "(optional) string, can be 'xml' (default), 'csv' or 'json'",
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "(optional) number, 1 (default) first 1000 records, 2 - next 1000 records, ...",
            "schema": {
              "type": "integer",
              "example": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of part(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetAllManufacturers": {
      "get": {
        "tags": ["Manufacturers"],
        "summary": "All Manufacturers",
        "description": "This provides a list of all the Manufacturers available in vPIC Dataset.",
        "operationId": "manufacturers",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "ManufacturerType",
            "in": "query",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "Intermediate",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "description": "Results are provided in pages of 100 items, use parameter 'page' to specify 1-st (default), 2nd, 3rd, ...Nth ... page.",
            "schema": {
              "type": "integer",
              "example": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Manufacturer(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetManufacturerDetails/{manufacturer}": {
      "get": {
        "tags": ["Manufacturers"],
        "summary": "Manufacturer Details",
        "description": "This provides the details for a specific manufacturer that is requested.",
        "operationId": "manufacturerDetails",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "manufacturer",
            "in": "path",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "honda",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManufacturerName"
                },
                {
                  "$ref": "#/components/schemas/ManufacturerId"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of all make(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetMakeForManufacturer/{manufacturer}": {
      "get": {
        "tags": ["Makes"],
        "summary": "Makes for Manufacturer by Manufacturer Name",
        "description": "This returns all the Makes in the vPIC dataset for a specified manufacturer that is requested.",
        "operationId": "makesForManufacturerByManufacturerName",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "manufacturer",
            "in": "path",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "honda",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManufacturerName"
                },
                {
                  "$ref": "#/components/schemas/ManufacturerId"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of all make(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetMakesForManufacturerAndYear/{manufacturer}": {
      "get": {
        "tags": ["Makes"],
        "summary": " Makes for Manufacturer by Manufacturer Name and Year",
        "description": "This returns all the Makes in the vPIC dataset for a specified manufacturer and whose Year From and Year To range cover the specified year",
        "operationId": "makesForManufacturerByManufacturerNameAndYear",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 2013
            }
          },
          {
            "name": "manufacturer",
            "in": "path",
            "description": "If first parameter is a number - method will do exact match on Manufacturer's Id.If first parameter is a string - it will look for manufacturers whose name is LIKE the provided name (it accepts a partial manufacturer name as an input). Multiple results are returned in case of multiple matches.",
            "required": true,
            "schema": {
              "example": "honda",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManufacturerName"
                },
                {
                  "$ref": "#/components/schemas/ManufacturerId"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of all make(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetMakesForVehicleType/{vehicleType}": {
      "get": {
        "tags": ["Makes"],
        "summary": "Makes for Vehicle Type by Vehicle Type Name",
        "description": "This returns all the Makes in the vPIC dataset for a specified vehicle type whose name is LIKE the vehicle type name in vPIC Dataset",
        "operationId": "MakesForVehicleTypeByVehicleTypeName",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "vehicleType",
            "in": "path",
            "required": true,
            "description": " Vehicle Type name can be a partial name, or a full name for more specificity (e.g., 'Vehicle', 'Moto', 'Low Speed Vehicle', etc.)",
            "schema": {
              "example": "car",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/VehicleTypeString"
                },
                {
                  "$ref": "#/components/schemas/VehicleTypeInteger"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of WMIs for Manufacturer(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetVehicleTypesForMake/{makeName}": {
      "get": {
        "tags": ["Vehicle Types"],
        "summary": "Vehicle Types for Make by Name",
        "description": "This returns all the Vehicle Types in the vPIC dataset for a specified Make whose name is LIKE the make name in vPIC Dataset",
        "operationId": "vehicleTypesForMakeByName",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "makeName",
            "in": "path",
            "required": true,
            "description": "Make name can be a partial name, or a full name for more specificity (e.g., 'Merc;, 'Mercedes Benz', etc.)",
            "schema": {
              "example": "mercedes",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of WMIs for Manufacturer(s) according to the filled fields"
          }
        }
      }
    },
    "/vehicles/GetVehicleTypesForMakeId/{makeId}": {
      "get": {
        "tags": ["Vehicle Types"],
        "summary": "Vehicle Types for Make by Id",
        "description": "This returns all the Vehicle Types in the vPIC dataset for a specified Make whose ID equals the make ID in vPIC Dataset.",
        "operationId": "vehicleTypesForMakeById",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "enum": ["xml", "csv", "json"],
              "type": "string",
              "example": "json"
            }
          },
          {
            "name": "makeId",
            "in": "path",
            "required": true,
            "schema": {
              "example": 450,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call of Vehicle type(s) according to the filled fields"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "VIN"
    },
    {
      "name": "WMI"
    },
    {
      "name": "Makes"
    },
    {
      "name": "Parts"
    },
    {
      "name": "Manufacturers"
    },
    {
      "name": "Vehicle Types"
    },
    {
      "name": "Equipment Plant"
    },
    {
      "name": "Models"
    },
    {
      "name": "Vehicle Variable"
    }
  ],
  "components": {
    "schemas": {
      "ManufacturerName": {
        "type": "string",
        "default": "hon"
      },
      "ManufacturerId": {
        "type": "integer",
        "default": 987
      },
      "VehicleTypeString": {
        "type": "string",
        "default": "car"
      },
      "VehicleTypeInteger": {
        "type": "integer",
        "default": 2
      }
    }
  }
}
